import net.orhanbalci.ga.chromosome.Chromosome;import net.orhanbalci.ga.warehouse.SolverParameters;import net.orhanbalci.ga.warehouse.WarehouseLocationProblem;import net.orhanbalci.ga.warehouse.WarehouseLocationProblemReader;import net.orhanbalci.ga.warehouse.WarehouseLocationSolver;import java.io.*;import java.util.*;public class Main {    public static String[] fileNames = {"wl_1000_1", "wl_100_3", "wl_100_8", "wl_200_2", "wl_25_2",            "wl_300_4", "wl_500_3", "wl_50_3",            "wl_100_1", "wl_100_4", "wl_100_9", "wl_200_3", "wl_25_3", "wl_300_5", "wl_500_4", "wl_50_4",            "wl_100_10", "wl_100_5", "wl_16_1", "wl_200_4", "wl_300_1", "wl_3_1", "wl_500_5",            "wl_100_11", "wl_100_6", "wl_2000_1", "wl_200_5", "wl_300_2", "wl_500_1", "wl_50_1",            "wl_100_2 ", "wl_100_7", "wl_200_1", "wl_25_1", "wl_300_3", "wl_500_2", "wl_50_2", "wl_25_2"};    public static void main__(String[] args) {        for (int i = 0; i < fileNames.length; i++) {            if (i != 28)       // 4 9 28 0 25                continue;            String fileName = String.format(".\\data\\%s", fileNames[i]);            //String fileName = args[0];            List<WarehouseLocationProblem> problems = WarehouseLocationProblemReader.readFile(fileName);            double globalBest = Double.MAX_VALUE;            //for (int populationCount = 10; populationCount < 51; populationCount += 4) {            //for (int generationCount = 50; generationCount < 250; generationCount += 10) {            //for (double mutationRate = 0.9; mutationRate > 0.7; mutationRate -= 0.05) {            //for (double crossoveRate = 0.80; crossoveRate < 0.96; crossoveRate += 0.01) {            for (int freqGeneCount = 4; freqGeneCount < 8; freqGeneCount++) {                for (int j = 0; j < 1000; j++) {                    SolverParameters params = new SolverParameters();                    params.randomSeed = System.currentTimeMillis();                    params.populationCount = 10;                    params.generationCount = 160;                    params.crossoverType = "OnePoint";                    params.crossoverProb = 0.95;                    params.mutatorType = "MostFrequent";                    params.frequentGeneCount = freqGeneCount;                    params.mutatorProb = 0.8;                    params.mutatorSide = 2;                    params.selectorType = "Tournement";                    params.tournementSize = 2;                    params.elitism = false;                    WarehouseLocationSolver solver = new WarehouseLocationSolver(                            params, problems.get(0)                    );                    solver.solve();                    boolean bestChanged = false;                    if (solver.getBest().getFitnessValue() < globalBest) {                        System.out.println(params);                        solver.printResult(solver.getBest());                        System.out.println("");                        globalBest = solver.getBest().getFitnessValue();                        bestChanged = true;                    }                    if (bestChanged) {                        Chromosome c = solver.hillClimb(solver.getBest(), true, true);                        if (c.getFitnessValue() <= 2950) {                            System.out.println("^^^^^^^^Result Found^^^^^^");                            System.out.println(params);                            solver.printResult(c);                            System.exit(0);                        }                    }                }            }        }    }    public static void main(String[] args) {        if (args.length == 0) {            System.out.println("Illegal argument count");            System.exit(1);        }        //for (int i = 1; i < fileNames.length; i++) {        //  String fileName = ".\\data\\" + fileNames[i];        String fileName = args[0];        List<WarehouseLocationProblem> problems = WarehouseLocationProblemReader.readFile(fileName);        SolverParameters tempParams = new SolverParameters();        tempParams.problemName = fileName;        try {            tempParams.writeToFile();        } catch (IOException e) {            e.printStackTrace();        }        for (int j = 0; j < 10; j++) {            SolverParameters params = new SolverParameters();            params.problemName = fileName;            params.randomSeed = System.currentTimeMillis();            params.populationCount = 10;            params.generationCount = 50;            params.crossoverType = "OnePoint";            params.crossoverProb = 0.94;            params.mutatorType = "MostFrequent";            params.mutatorProb = 0.8;            params.mutatorSide = 1;            params.frequentGeneCount = 9;            params.selectorType = "Tournement";            params.tournementSize = 2;            params.elitism = false;            WarehouseLocationSolver solver = new WarehouseLocationSolver(                    params, problems.get(0)            );            solver.solve();            //Chromosome hillBest = solver.hillClimb(solver.getBest(), false, true);            //if (hillBest.getFitnessValue() < solver.getBest().getFitnessValue())            // solver.printResult(hillBest);            //else            solver.printResult(solver.getBest());        }    }}